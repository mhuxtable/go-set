// Code generated by genset. DO NOT EDIT.

// vim: syntax=go

package stringset

//go:generate genset --filename "zz_genset.go" --package-name "stringset" --set-name "Set" --generate-tests=true --generate-comment=true --quiet=false string .

import (
	"fmt"
	"strings"
)

type _set_Set_string map[string]struct{}

// Set is a basic set data structure for elements of type string. It is
// not safe for concurrent use. Where appropriate, it is the user's
// responsibility to ensure type safety for elements retrieved from the set.
type Set struct {
	// embed set to hide the underlying map
	_set_Set_string
}

// New instantiates and returns a new Set with the provided initial elements.
func NewSet(x ...string) Set {
	var s Set
	for _, item := range x {
		s.Add(item)
	}
	return s
}

// Add adds the provided element(s) to the Set.
func (s *_set_Set_string) Add(xs ...string) {
	if len(xs) == 0 {
		return
	}

	if *s == nil {
		*s = make(_set_Set_string)
	}

	for _, x := range xs {
		(*s)[x] = struct{}{}
	}
}

// Count returns the number of elements in the Set.
func (s Set) Count() int {
	if s._set_Set_string == nil {
		return 0
	}
	return len(s._set_Set_string)
}

// Has returns whether the Set contains the specified element.
func (s Set) Has(x string) bool {
	if len(s._set_Set_string) == 0 {
		return false
	}

	_, exists := (s._set_Set_string)[x]
	return exists
}

// Remove removes the specified element from the Set. This is a no-op if the
// Set does not contain the element.
func (s *_set_Set_string) Remove(x string) {
	if *s == nil {
		return
	}

	delete(*s, x)
}

// Slice returns a slice of the elements contained in the Set.
func (s Set) Slice() []string {
	sl := make([]string, 0, len(s._set_Set_string))
	for k := range s._set_Set_string {
		sl = append(sl, k)
	}
	return sl
}

// String implements fmt.Stringer
func (s Set) String() string {
	str := make([]string, 0, len(s._set_Set_string))
	for el := range s._set_Set_string {
		str = append(str, fmt.Sprintf("%v", el))
	}
	return fmt.Sprintf("Set{%s}", strings.Join(str, ", "))
}

// Intersect computes the set intersection of sets s1 and s2, leaving the
// result in set s1.
func (s1 *_set_Set_string) Intersect(s2 Set) {
	for k := range *s1 {
		if !s2.Has(k) {
			delete(*s1, k)
		}
	}
}

// Union computes the set union of sets s1 and s2, leaving the result in set s1.
func (s1 *_set_Set_string) Union(s2 Set) {
	s1.Add(s2.Slice()...)
}

// Subtract subtracts set s2 from set s1, mutating the set s1 in-place.
func (s1 *_set_Set_string) Subtract(s2 Set) {
	for k := range *s1 {
		if s2.Has(k) {
			delete(*s1, k)
		}
	}
}

// Intersect returns the set intersection of sets s1 and s2 in a new Set,
// without mutating the input Sets.
func IntersectSet(s1, s2 Set) Set {
	if s1.Count() == 0 || s2.Count() == 0 {
		return Set{}
	}

	var s Set
	for _, el := range s1.Slice() {
		if s2.Has(el) {
			s.Add(el)
		}
	}
	return s
}

// Union returns the set union of sets s1 and s2 in a new Set, without mutating
// the input Sets.
func UnionSet(s1, s2 Set) Set {
	if s1.Count() == 0 && s2.Count() == 0 {
		return Set{}
	}

	var s Set
	s.Add(s1.Slice()...)
	s.Add(s2.Slice()...)
	return s
}

// Subtract returns the subtraction of set s2 from set s1 in a new Set, without
// mutating the input Sets.
func SubtractSet(s1, s2 Set) Set {
	if s1.Count() == 0 {
		return Set{}
	}
	if s2.Count() == 0 {
		return s1
	}

	var s Set
	s.Add(s1.Slice()...)
	s.Subtract(s2)
	return s
}
