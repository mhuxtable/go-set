package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
)

type Model struct {
	PackageName         string
	DataType            string
	SetTypeName         string
	InternalSetTypeName string
	GoGenerateComment   string
}

func generateGoFromTemplate(tpl *template.Template, m Model) ([]byte, error) {
	var buf bytes.Buffer
	buf.WriteString("// File generated by genset. DO NOT EDIT.\n\n")

	if err := tpl.Execute(&buf, m); err != nil {
		return nil, fmt.Errorf("while generating Go source code: %w", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Fprintf(os.Stderr, "Input source code was:\n\n%s\n\n", buf.Bytes())
		return nil, fmt.Errorf("while formatting Go source code: %w", err)
	}

	return formatted, nil
}

type Generator struct {
	Model               Model
	IgnoreExistingFiles bool
}

func (g *Generator) Generate(tpl *template.Template, outputPath string) error {
	if !g.IgnoreExistingFiles {
		if err := g.checkOverwriteFile(outputPath); err != nil {
			return err
		}
	}

	code, err := generateGoFromTemplate(tpl, g.Model)
	if err != nil {
		return err
	}

	if err = ioutil.WriteFile(outputPath, code, 0644); err != nil {
		return fmt.Errorf("while writing generated source code to %s: %w", outputPath, err)
	}

	fmt.Println(outputPath)
	return nil
}

func (g *Generator) checkOverwriteFile(path string) error {
	stat, err := os.Stat(path)
	if err != nil {
		if os.IsNotExist(err) {
			return nil
		}

		return err
	}

	if stat.Mode()&os.ModeType != 0x0 {
		return fmt.Errorf("file at %s is of unsupported mode", stat.Name())
	}

	// file exists, prompt for confirmation to overwrite
	for {
		var in string
		fmt.Printf("\nThis will overwrite %s. Are you sure? [y/N/all/?] ", stat.Name())

		_, err = fmt.Scanln(&in)
		if err != nil {
			return err
		}

		switch strings.ToLower(in) {
		case "y":
			return nil
		case "n":
			return fmt.Errorf("aborted by user request")
		case "all":
			g.IgnoreExistingFiles = true
			return nil
		case "?":
			fmt.Println(strings.Join([]string{
				"  y - overwrite this file only",
				"  n - abort",
				"all - overwrite this and all future files this run",
				"  ? = this help",
			}, "\n"))
			continue
		default:
			return fmt.Errorf("aborted due to unknown input %s", in)
		}
	}
}
